{
  "name": "foundation-stylus",
  "version": "0.9.1",
  "description": "Stylus plugin for foundation",
  "main": "foundation-plugin.js",
  "directories": {
    "lib": "./styl"
  },
  "dependencies": {
    "stylus": "~0.42.1"
  },
  "devDependencies": {
    "bluebird": "~1.0.0",
    "cssbeautify": "~0.3.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Philip Roberts"
  },
  "license": "MIT",
  "readme": "# Foundation stylus plugin\n\n## What?\n\nThis is _not_ a complete port of foundation 5 for stylus. For the specific reason that maintaining complete ports is painful, and so they get out of date.\n\nThis is:\n\n* An easy way to import foundation into a new stylus project.\n* Reformatting of the compiled foundation css so it can be imported into stylus as-is. This allows you to transparently use `@extend .small-4` in your css for prototyping quickly, without messing up your html.\n* Exposes _some_ helper mixins to make that easier.\n\n## Installation\n\n* Use stylizer\n* `npm install foundation-stylus`\n* Add `'foundation-stylus`' to list of stylizer/stylus plugins.\n* Add `@import 'foundation'` to your main stylus file, e.g. `app.styl`.\n\n\n## Usage\n\n### With `@extend`\n\nThe simplest way to use this is with stylus's `@extend` function. This allows you to name your rows/columns/buttons/modules/etc semantically, and then extend them in css, just look at the foundation docs to know what classes you need to use.\n\nE.g. for a three-column layout, you might have:\n\n```html\n<section class='app-main'>\n    <nav class='main-navigation'>\n        ...\n    </nav>\n\n    <div class='main-content'>\n    </div>\n\n    <div class='chat'>\n    </div>\n</section>\n```\n\n```stylus\n@import 'foundation'\n\n.app-main\n    @extends .row\n\n.main-navigation\n    @extends .small-3\n    @extends .large-2\n    @extends .columns\n\n.main-content\n    @extends .small-7\n    @extends .large-9\n    @extends .columns\n\n.chat\n    @extends .small-2\n    @extends .large-1\n    @extends .columns\n```\n\nThis keeps your html nice and clean, so that when you move from prototyping a layout -> production css, your UI/designer/team can refactor/rewrite most of the css, without having to remove all the stylus cruft.\n\n\n### With mixins\n\nUsing foundation-stylus as above means that we can integrate stylus and foundation without having to rewrite stylus into css (since stylus understands normal css). But the @extends syntax can get a bit verbose when adding multiple classes, as above. So we maintain a small list of extra mixins to make that process easier.\n\n```stylus\n@import 'foundation'\n\n.app-main\n    grid-row\n\n.main-navigation\n    grid-columns(small: 3, large: 2)\n\n.main-content\n    grid-columns(small: 7, large: 9)\n\n.chat\n    grid-columns(small: 2, large: 1)\n```\n\n## Mixin documentation\n\n* [Grid](#grid)\n  * [`grid-row()`](#grid-row) - equivalent to .row\n  * [`grid-columns(small, [medium], [large])`](#grid-columnssmall-medium-large) - equivalent to .small-n.medium-n.large-n.columns\n  * [`grid-columns(small: n, medium: n, large: n)`](#grid-columnssmall-n-medium-n-large-n) - equivalent to .small-n.medium-n.large-n.columns\n\n\n\n### Grid\n\n#### `grid-row()`\n\nEquivalent to adding foundation's `.row` class:\n\n```stylus\n.myapp\n  grid-row\n```\n\nis equivalent to\n\n```html\n<div class='myapp row'></div>\n```\n\n\n#### `grid-columns(small, [medium], [large])`\n\nHelper for creating columns, with positional arguments. `medium` and `large` are optional. Aliased as `grid-column` if you prefer that.\n\n```stylus\n.mycolumn\n  grid-columns(2, 3, 4)\n```\n\nis equivalent to\n\n```html\n<div class='mycolumn small-2 medium-3 large-4 columns'></div>\n```\n\n#### `grid-columns(small: n, medium: n, large: n)`\n\nHelper for creating columns, with keyword arguments. You may specify any 1, 2 or all, arguments to create the relevant columns. Aliased as `grid-column` if you prefer that.\n\n```stylus\n.mycolumn\n  grid-columns(small: 4, large: 2)\n```\n\nis equivalent to\n\n```html\n<div class='mycolumn small-2 large-4 columns'></div>\n```\n\n\n## Contributing\n\nI would love to support more things via (minimal mixins), pull requests are more than welcome for that.\n\n\n## Versioning\n\nVersioning is tricky because I want to be able to track foundations updates (both minor and major), but also modify the actual api of this plugin if necessary, all while sticking closely to semver. My intention is to mark this as 1.0.0 when the public api for the plugin itself is stable, and then release minor/patch versions along with either mixin increments in this plugin, or minor/patch releases of foundation itself. If zurb 6 comes out, I suspect I'll bump everything here up to 2.0.0 and carry on from there.\n\n",
  "readmeFilename": "README.md",
  "_id": "foundation-stylus@0.9.1",
  "dist": {
    "shasum": "6da293ca3c6ba469c9bf91599e7013cccf93b85b"
  },
  "_from": "foundation-stylus@",
  "_resolved": "https://registry.npmjs.org/foundation-stylus/-/foundation-stylus-0.9.1.tgz"
}
